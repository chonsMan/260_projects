Name: Jesse Harris

The program should be thought of as broken into three layers: first, there is the top layer where all the user interface actions will reside. This will be totlded Label. Label will hold functions that will add an artist, update a song, add a song, and delete a song. It will need two operator overloads for ostream and istream. Below the Label layer will be the Artist. This layer is where the artist is constructed. I will need to implement a dummy artist, as well, to add an artist. Beceause the song layer is the bottom most layer, the Artist layer will also need to house functions that deal with the song; such as update song and add a song and delete a song. I will need to overload the "==" operator so that two artists can be compared. Also the ostream and istream overloards will be needed. The list layer will be the bottom most layer and it will have the Node to move thorugh the lists. I will also house a find function to sort through the list and a remove function that will lift a node from a list to be updated. This is because I will need to conseider how a songs views and likes will be updatad; namely, if a songs popularity increases beyond the song before it in the list I will need to add it accordingly. Song is an auxillary layer that will handle the particulars of a song; such as the title, length, views and likes. I will also house the get functions for those properties, which will be needed for the user interaction.

Now, because there are three seperate layers, there is room to shield the client program from ever realizing that this program implements linear linked lists. It does this by having the top Label layer that was mentioned above. So, for example, if a programmer wanted to use my program, but backed by an array. Because the user interface is only on the top level, this would not be a problem. The only access to the lower level functions is to g through the top layer; hence the user can nver really see what is going on and the program's data structures are hidden.

This program will implement the linked-list data structure. It will do so by having a two teir linked list. One list, which will be the top list, will hold the names of the artists, their description, and their top stories as data. Because the artists will not be arranged in any particular fashion, a previous node pointer will not be needed and the information will be pushed to the front of the list using a push front function. Also a find function will need to be implemented for the Artist class to find each artist. The linked list below this will be the linked list that will handle the songs. It will be handled in such a way as to order the songs based on their popularity and will therefore be allocated both a next pointer and a previous pointer to move through the list. Also, this functionality will be needed to delete a song from the list. 

Each function that will report back an error will use a runtime error. This is because I do not want to add extera overlad functions and can simply used the cout command and have it spit out the error that was found. I will do this using the try, catch, and throw method. 

One function that uses recursion is the deconstructor for list. I return if I am not at the head; else, I delete the head. This function is two lined of code and will continue to call itself until the case where it is not the head, in which case it terminates the function. 
